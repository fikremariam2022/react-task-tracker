Why would u use react?
=> structure the view layer of your application
=> Reusable components with their own state
=> JSX - Dynamic markup
=> Interactive UIs with Virtual DOM
=> Performance & Testing
=> Very popular in the industry


state is an object that controls how a component renders and behave.
App or global state refers to state that is available to the entire UI, not just to
a single component.

React hooks
=> useState - returns a stateful value and a function to update it.
=> useEffect - Performs side effects in function components
=> useContext, useReducer, useRef - Beyond the scope of this corse

React developer tool for browser help us to see all the component, props and states of
a react appliction.

start new app
npx create-react-app [app-name]

in index.html <div id="root"></div> serves as gateway for the react app

JSX looks like JS and it is java script extension
JSX expression should have one parent

You can define any javascript expression, then include in the dom part with curly brass
This make JSX really dynamic html
function App(){
const brad="Brad full name";
 return(<h1>hello {brad}</h1>
}

Install this extension for vs code 
 ES7 React/Redux/GraphQL/React-Native snippets

this will save you from typing everything. e.g. typing rafc and pressing enter should
give you the following React arrow function component as follow( In Header.js )
in components/header.js

const Header = () => {
  return (
    <header>
        <h1>Task Tracker</h1>
    </header>
  )
}
------------------------------
in App.js

export default Header

import Header from './components/Header.js'

const Header = () => {
  return (
    <div>
      <Header />
    </div>
  )
}

export default Header 

----------------------------------------------------------
passing props
<Header title="hello world" />
handle the props

const Header = (props) => {
  return (
    <header>
        <h1>{props.header}</h1>
    </header>
  )

-------------------------------------
default props - you can define defaults to props

in header js
const Header = (props) => {
  return (
    <header>
        <h1>{props.title}</h1>
    </header>
  )
}
Header.defaultProps = {
    title:"Hello man"
}
export default Header
------------------------------------------------
defining prop types
we can make constraint on prop types. This helps for robust coding

Header.propTypes = {
 title: PropTypes.string;
}
---------------------------------------
required constraint

Header.propTypes = {
 title: PropTypes.string.isRequired;
}

--------------------------------------
defining style	

use a double brass, camel case and separate using comma

 <h1 style={{color: 'white',backgroundColor: 'black'}}>{props.title}</h1>
 
 or if you use expression use, revoke it in single brass
 
 return (
    <header>
        <h1 style={headerStyle}>{props.title}</h1>
    </header>
  )
  
  const headerStyle = {
  color: 'white',
  backgroundColor: 'black'
}

--------------------------------------------------------------
referencing a class - use className

    <header className='header'>
        <h1>{props.title}</h1>
    </header>
-------------------------------------------------------------------
passing props other option
const Button = ({color, text}) => {
  return (
    <button style={{backgroundColor: color}} className="btn">
        {text}
    </button>
  )
}

then in the implementation
<Button color='blue' text='Add' />
-----------------------------------------------------------------------------
You can also pass onClick as props

const Button = ({color, text, onClick}) => {
    
  return (
    <button onClick={onClick}
    style={{backgroundColor: color}} className="btn">
        {text}
    </button>
  );
}
Button.defaultProps={
    color: 'steelblue'
}
Button.propTypes={
    text: PropTypes.string,
    onClick: PropTypes.func
}
-------------------------
so in this case the implementing component should pass the onClick
const Header = (props) => {
  const onClick = ()=>{
    console.log('Click');
  }
  return (
    <header className='header'>
        <h1>{props.title}</h1>
        <Button color='blue' text='Add' onClick={onClick} />
    </header>
  )
}
-----------------------------------------------------------------------------------
Array map syntax

const tasks=[..]
return (
    <>
        {
            tasks.map((el) => (
                <h3 key={el.id}>{el.text}</h3>
            ))
        }
      
    </>
  )
  --------------------------------------------------------------------------------
  What is a Hook? A Hook is a special function that lets you “hook into” React features. For example, useState is a 
  Hook that lets you add React state to function components. We’ll learn other Hooks later.
  -------------------------------
  When would I use a Hook? If you write a function component and realize you need to add some state to it, previously you had to convert it to a class.
  Now you can use a Hook inside the existing function component. We’re going to do that right now!
  -----------------------------------------------------------------
  
  In a class, we initialize the count state to 0 by setting this.state to { count: 0 } in the constructor:

class Example extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    };
  }
In a function component, we have no this, so we can’t assign or read this.state. Instead, we call the useState Hook directly inside our component:

import React, { useState } from 'react';

function Example() {
  // Declare a new state variable, which we'll call "count"
  const [count, setCount] = useState(0);
  -------------------------------------------------------------
  install react-icons
  npm i react-icons
  
  ==============================================================
  Passing data from child to parent
  
  Paren Tasks has to pass onDelete attribute
  const Tasks = ({tasks, onDeleteTask}) => {
  return (
    <>
        {
            tasks.map((el) => (
                <Task onDelete={()=>onDeleteTask(el.id)} key={el.id} task={el} />
            ))
        }
    </>
  )
}

child Task will receive and define the the onDelete
const Task = ({task, onDelete}) => {
  return (
    <div>
    <h3 className="task"> 
      {task.text} 
      <FaTimes onClick={onDelete}  style={{float: 'right', color: 'red'}}
      />
    </h3>
    <p>{task.day}</p>
    </div>
  )
}

====================================================
Building
use npm run build

if you want to test locally, serve -s build

if serve not installed use this code to install it, npm -i -g serve
if you want to run it on specific port, use -p [portNumber]
npm -i -g serve -p 4000

==================================
JSON SERVR -> used to create a  fake REST API
npm install -g json-server

then in the package.json in  script part add the server part
"scripts": {
    "start": "react-scripts start",
    ...
	...
    "server": "json-server --watch db.json --port 5000"
  },

then run the following
npm run server

this create the backend json.db and run it on http://localhost:5000

The add and delete tasks can be as follows
const res= await fetch('http://localhost:5000/tasks', {
      method: 'POST',
      headers:  {'Content-type': 'application/json'},
      body: JSON.stringify(task)},
    )
      const data = await res.json();
      setTasks([...tasks, data]);
      setAdd(false);
const deleteTaskFromApi = async (id)=> {
   await fetch(`http://localhost:5000/tasks/${id}`, {method:'DELETE'})
   setTasks(tasks.filter(task=>task.id !==id))
   
  FUNCTION THAT USE UPDATE
  const handleDB = async (id) => {
   let newTask = tasks.find(t => t.id===id);
   newTask.reminder = !newTask.reminder
   await fetch(`http://localhost:5000/tasks/${id}`, {method: 'PUT', headers: {'Content-type': 'application/json'},
   body: JSON.stringify(newTask)
  })
  const fetchedTasks = await fetchTasks()
  setTasks(fetchedTasks)

}
=========================================
Router

import { BrowserRouter as Router, Route, Routes } from "react-router-dom";

<Router>
<Routes>
<Route
           
            path="/about"
            element={<About />}

          />
		   <Route
            path='/task/:id'
            element={ <TaskDetail /> }
            
          />
</Routes>
</Router>
npm i react-router-dom

=========================================================================================================================

Javascript for React

There are two different ways to write a function in JavaScript: the traditional way, using the function keyword, called a function declaration, 
and as an arrow function, which was introduced in ES6. Both function declarations and arrow functions can be used to write function components in React.

in order to write our functions to remove unnecessary boilerplate, such that we can even write it all on a single line.


// Function declaration syntax
function MyComponent(props) {
  return <div>{props.content}</div>;
}
 
// Arrow function syntax
const MyComponent = (props) => {
  return <div>{props.content}</div>;
}
 
// Arrow function syntax (shorthand)
const MyComponent = props => <div>{props.content}</div>;

---------------
With the addition of ES6, we were given a newer form of string called a template literal, which consists of two back ticks `` instead of single or double quotes.
------------------------

Short Conditionals: &&, ||, Ternary Operator

&& if left operation is true show other wise don't show
import React from "react";

function App() {
  const isLoggedIn = true;

  // If true: Welcome back!, if false: nothing
  return <div>{isLoggedIn && "Welcome back!"}</div>;
}

---------
|| operator => if left expression is false then show the right expression else show nothing
opposite of &&

import React from "react";

function App() {
  const isLoggedIn = true;

  // If true: nothing, if false: Who are you?
  return <div>{isLoggedIn || "Who are you?"}</div>;
}

export default App;

export default App;
---------------------------------------------

Three Array Methods: .map(), .filter(), .reduce()
.map() method. It allows us to transform each element in our array in the way we specify with the inner function.
/* Note that this isn't exactly the same as the normal JavaScript .map() method, but is very similar. */
import React from "react";

function App() {
  const programmers = ["Reed", "John", "Jane"];

  return (
    <ul>
      {programmers.map(programmer => <li>{programmer}</li>)}
    </ul>
  );
}

export default App;


-----------
.filter(), as its name indicates, allows us to filter certain elements out of our array. 
For example, if we wanted to remove all names of programmers that started with "J", we could do so with .filter():

import React from "react";

function App() {
  const programmers = ["Reed", "John", "Jane"];

  return (
    <ul>
      {/* Returns 'Reed' */}
      {programmers
       .filter(programmer => !programmer.startsWith("J"))
       .map(programmer => <li>{programmer}</li>)}
    </ul>
  );
}

----------------------------------------
Object property shorthand
if the property name is the same as the value, you only have to list the property name.

This is the object property shorthand:

const name = "Reed";

const user = {
  // instead of name: name, we can use...
  name
};

console.log(user.name); // Reed
------------------------------------------

Destructing object handy method

const user = {
  name: "Reed",
  age: 28,
  isEnglishSpeaker: true
};

// Object destructuring
const { age, name, isEnglishSpeaker: knowsEnglish } = user;
// Use ':' to rename a value as you destructure it

console.log(knowsEnglish); // true

=========================================

Creating object from another object
const user = {
  name: "Reed",
  age: 28,
  isEnglishSpeaker: true
};

// Copy all of user's properties into secondUser 
const secondUser = {
  ...user  
};

======================
while copying, at the same time modifying 

// Copy all of user's properties into secondUser 
const user = {
  name: "Reed",
  age: 28
};
const secondUser = {
  ...user,
  ...moreUserInfo,
   computer: "MacBook Pro"
};

===================================

Promises + Async/Await Syntax
Virtually every React application consists of asynchronous code – code that takes an indefinite amount of time to be executed. 
Particularly if you need to get or change data from an external API using browser features like the Fetch API or the third-party library axios.


Here is a real example of using React to fetch data from my GitHub API using the Fetch API to show my profile image. The data is resolved using promises:

/* Go to react.new and paste this code in to see it work! */
import React from 'react';
 
const App = () => {
  const [avatar, setAvatar] = React.useState('');
 
  React.useEffect(() => {
    /* 
      The first .then() lets us get JSON data from the response.
      The second .then() gets the url to my avatar and puts it in state. 
    */
    fetch('https://api.github.com/users/reedbarger')
      .then(response => response.json())
      .then(data => setAvatar(data.avatar_url))
      .catch(error => console.error("Error fetching data: ", error);
  }, []);
 
  return (
    <img src={avatar} alt="Reed Barger" />
  );
};
 
export default App;

Instead of always needing to use callbacks to resolve our data from a promise, we can use a cleaned syntax that looks identical to synchronous code, 
called the async/await syntax.

/* Go to react.new and paste this code in to see it work! */
import React from "react";

const App = () => {
  const [avatar, setAvatar] = React.useState("");

  React.useEffect(() => {
    /* 
	  Note that because the function passed to useEffect cannot be async, we must create a separate function for our promise to be resolved in (fetchAvatar)
    */
    async function fetchAvatar() {
      const response = await fetch("https://api.github.com/users/reedbarger");
      const data = await response.json();
      setAvatar(data.avatar_url);
    }

    fetchAvatar();
  }, []);

  return <img src={avatar} alt="Reed Barger" />;
};

export default App;

====================================
how do you catch errors with async/await?

/* Go to react.new and paste this code in to see it work! */
import React from "react";

const App = () => {
  const [avatar, setAvatar] = React.useState("");

  React.useEffect(() => {	
    async function fetchAvatar() {
      /* Using an invalid user to create a 404 (not found) error */
      const response = await fetch("https://api.github.com/users/reedbarge");
      if (!response.ok) {
        const message = `An error has occured: ${response.status}`;
        /* In development, you'll see this error message displayed on your screen */
        throw new Error(message);
      }
      const data = await response.json();

      setAvatar(data.avatar_url);
    }

    fetchAvatar();
  }, []);

  return <img src={avatar} alt="Reed Barger" />;
};

export default App;
==========================================
ES6 MODULE IMPORT
The idea behind ES modules is to be able to split up our JavaScript code into different files, to make it modular or reusable across our app.

As far as JavaScript code goes, we can import and export variables and functions. There are two ways of importing and exporting, as named imports/exports
 and as default imports/exports.

// constants.js
const name = "Reed";

const age = 28;

function getName() {
  return name;   
}

export { name, age };
export default getName;

// app.js
import getMyName, { name as myName, age as myAge } from '../constants.js';

console.log(myName, myAge, getMyName());




======================================================================================
We can also write all of the exports at the end of the file instead of next to each variable or function:

// constants.js
const name = "Reed";

const age = 28;

function getName() {
  return name;   
}

export { name, age };
export default getName;

// app.js
import getName, { name, age } from '../constants.js';

console.log(name, age, getName());

